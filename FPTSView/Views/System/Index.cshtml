@model List<FPTS_API.Models.User>
@{
    ViewBag.Title = "View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="invoice-body">
    <h1>Khai báo thông tin hóa đơn</h1>
    <form id="form_info" method="post">
        <div class="form-invoice-info">
            <div class="form-invoice-input">
                <label class="label-input" for="username">Tên Tài Khoản</label>
                <input type="text"
                       id="txtUsername"
                       name="username"
                       onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
            <div class="form-invoice-input">
                <label class="label-input" for="password">Mật Khẩu</label>
                <input type="text"
                       id="txtPassword"
                       name="password"
                       onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
            <div class="form-invoice-input">
                <label class="label-input" for="createby">Được Tạo Bởi</label>
                <input type="text"
                       id="txtCreateBy"
                       name="createby"
                       onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
            <div class="form-invoice-input">
                <label class="label-input" for="createon">Ngày Tạo</label>
                <input type="date" id="txtCreateOn" name="createon" onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
            <div class="form-invoice-input">
                <label class="label-input" for="modifiedby">Điều Chỉnh Bởi</label>
                <input type="text"
                       id="txtModifiedBy"
                       name="modifiedby"
                       onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
            <div class="form-invoice-input">
                <label class="label-input" for="modifiedon">Thời Gian Tạo Điều Chỉnh</label>
                <input type="date" id="txtModifiedOn" name="modifiedon" onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
            <div class="form-invoice-input">
                <label class="label-input" for="fullname">Họ Tên Người Dùng</label>
                <input type="text"
                       id="txtFullname"
                       name="fullname"
                       onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
            <div class="form-invoice-input">
                <label class="label-input" for="userstatus">Trạng Thái</label>
                <input type="text"
                       id="txtUserStatus"
                       name="userstatus"
                       onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
            <div class="form-invoice-input">
                <label class="label-input" for="email">Email</label>
                <input type="text"
                       id="txtEmail"
                       name="email"
                       onblur="handleError(this.id)" />
                <span style="color: red; display: block"></span>

            </div>
        </div>
        <div class="form-invoice-btn">
            <button class="btn-invoice" id="btn-create" onclick="Create()">Thêm</button>
            <button style="display:none" class="btn-invoice" id="btn-update" onclick="Update()">Sửa</button>
            <button style="display:none" class="btn-invoice" id="btn-delete" onclick="Delete()">Xóa</button>
            <button class="btn-invoice" id="btn-search" onclick="Search()">Tìm Kiếm</button>
            <button class="btn-invoice" id="btn-refresh" onclick="Refresh()">Làm Mới</button>
        </div>
        </form>
</div>
<div class="invoice-data-container">
    <table class="table">
        <thead>
            <tr>
                <th>Tên Tài Khoản</th>
                <th>Mật Khẩu</th>
                <th>Được Tạo Bởi</th>
                <th>Ngày Tạo</th>
                <th>Điều Chỉnh Bởi</th>
                <th>Thời Gian Điều Chỉnh</th>
                <th>Họ Tên Người Dùng</th>
                <th>Email</th>
                <th>Trạng Thái</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < Model.Count; i++)
            {
                <tr style="text-align:center">
                    <td>@Html.DisplayTextFor(m => Model[i].Username)</td>
                    <td>@Html.DisplayTextFor(m => Model[i].Password)</td>
                    <td>@Html.DisplayTextFor(m => Model[i].CreateBy)</td>
                    <td>@Html.DisplayTextFor(m => Model[i].CreateOn)</td>
                    <td>@Html.DisplayTextFor(m => Model[i].ModifiedBy)</td>
                    <td>@Html.DisplayTextFor(m => Model[i].ModifiedOn)</td>
                    <td>@Html.DisplayTextFor(m => Model[i].Fullname)</td>
                    <td>@Html.DisplayTextFor(m => Model[i].Email)</td>
                    <td>@Html.DisplayTextFor(m => Model[i].UserStatus)</td>
                    <td>
                        <span onclick="handleUpdate(@i)">
                            <img style="width:18px; height:18px"
                                 src="~/Content/images/edit.svg" title="Edit user" />
                        </span>
                        <span onclick="handleDelete(@i)">
                            <img style="width:18px; height:18px; margin-left: 4%;"
                                 src="~/Content/images/bin.svg" title="Delete user" />
                        </span>
                    </td>
                </tr>
            }
            }
        </tbody>
    </table>
    <div class="data-paginate"></div>
</div>
<script>
    const isNull = (id) => {
        if (document.getElementById(id).value.trim() === "") {
            return true
        }
        else
            return false
    }

    const handleError = (id) => {
        document.getElementById(id).parentElement.querySelector("span").innerText = ""
    }
    const handleUpdate = (i) => {
        const x = document.getElementById("btn-update");
        if (x.style.display === "none") {
            x.style.display = "block";
        }
        if (i === 0) {
            let getDate = document.querySelector(`table tbody tr:first-child`).children[3].innerText.slice(0, -11).split("/")
            if (parseInt(getDate[0]) >= 1 && parseInt(getDate[0]) <= 9) {
                getDate[0] = "0" + getDate[0]
            }
            if (parseInt(getDate[1]) >= 1 && parseInt(getDate[1]) <= 9) {
                getDate[1] = "0" + getDate[1]
            }
            const dateFormatCreate = getDate[2].trim() + "-" + getDate[0] + "-" + getDate[1]
            let getDateModified = document.querySelector(`table tbody tr:first-child`).children[5].innerText.slice(0, -11).split("/")
            if (parseInt(getDate[0]) >= 1 && parseInt(getDate[0]) <= 9) {
                getDateModified[0] = "0" + getDateModified[0]
            }
            if (parseInt(getDate[1]) >= 1 && parseInt(getDate[1]) <= 9) {
                getDateModified[1] = "0" + getDateModified[1]
            }
            const dateFormatModified = getDate[2].trim() + "-" + getDate[0] + "-" + getDate[1]
            document.getElementById('txtUsername').value = document.querySelector(`table tbody tr:first-child`).children[0].innerText
            document.getElementById('txtPassword').value = document.querySelector(`table tbody tr:first-child`).children[1].innerText
            document.getElementById('txtCreateBy').value = document.querySelector(`table tbody tr:first-child`).children[2].innerText
            document.getElementById('txtModifiedBy').value = document.querySelector(`table tbody tr:first-child`).children[4].innerText
            document.getElementById('txtFullname').value = document.querySelector(`table tbody tr:first-child`).children[6].innerText
            document.getElementById('txtUserStatus').value = document.querySelector(`table tbody tr:first-child`).children[7].innerText
            document.getElementById('txtEmail').value = document.querySelector(`table tbody tr:first-child`).children[8].innerText
            document.getElementById('txtCreateOn').value = dateFormatCreate
            document.getElementById('txtModifiedOn').value = dateFormatModified
        } else {
            let getDate = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[3].innerText.slice(0, -11).split("/")
            if (parseInt(getDate[0]) >= 1 && parseInt(getDate[0]) <= 9) {
                getDate[0] = "0" + getDate[0]
            }
            if (parseInt(getDate[1]) >= 1 && parseInt(getDate[1]) <= 9) {
                getDate[1] = "0" + getDate[1]
            }
            const dateFormatCreate = getDate[2].trim() + "-" + getDate[0] + "-" + getDate[1]
            let getDateModified = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[5].innerText.slice(0, -11).split("/")
            if (parseInt(getDate[0]) >= 1 && parseInt(getDate[0]) <= 9) {
                getDateModified[0] = "0" + getDateModified[0]
            }
            if (parseInt(getDate[1]) >= 1 && parseInt(getDate[1]) <= 9) {
                getDateModified[1] = "0" + getDateModified[1]
            }
            const dateFormatModified = getDate[2].trim() + "-" + getDate[0] + "-" + getDate[1]
            document.getElementById('txtUsername').value = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[0].innerText
            document.getElementById('txtPassword').value = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[1].innerText
            document.getElementById('txtCreateBy').value = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[2].innerText
            document.getElementById('txtModifiedBy').value = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[4].innerText
            document.getElementById('txtFullname').value = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[6].innerText
            document.getElementById('txtUserStatus').value = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[7].innerText
            document.getElementById('txtEmail').value = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[8].innerText
            document.getElementById('txtCreateOn').value = dateFormatCreate
            document.getElementById('txtModifiedOn').value = dateFormatModified
        }
    }

    const handleDelete = (i) => {
        const x = document.getElementById("btn-delete");
        if (x.style.display === "none") {
            x.style.display = "block";
        }
        i === 0 ? document.getElementById('txtUsername').value = document.querySelector(`table tbody tr:first-child`).children[0].innerText : document.getElementById('txtUsername').value = document.querySelector(`table tbody tr:nth-child(${i + 1})`).children[0].innerText
    }

    const Delete = () => {
        const x = document.getElementById("btn-delete");
        const y = document.getElementById("txtUsername");
        if (isNull("txtUsername")) {
            document.getElementById('btn-delete').setAttribute("type", "button")
            y.focus()
            y.parentElement.querySelector("span").innerText = "Cần điền trường này !"
        } else {
            if (x.style.display === "block") {
                x.style.display = "none";
            }
            y.parentElement.querySelector("span").innerText = ""
            x.setAttribute("type", "submit")
            document.getElementById("form_info").setAttribute("action", "@Url.Action("DeleteUser", "System")")
        }
    }

    const Update = () => {
        const x = document.getElementById("btn-update");
        if (isNull("txtUsername") || isNull("txtPassword") || isNull("txtCreateBy") || isNull("txtModifiedBy") || isNull("txtFullname") || isNull("txtUserStatus") || isNull("txtModifiedOn")) {
            x.setAttribute("type", "button")
            alert("Cần điền đầy đủ các trường")
        } else {
            if (x.style.display === "block") {
                x.style.display = "none";
            }
            x.setAttribute("type", "submit")
            document.getElementById("form_info").setAttribute("action", "@Url.Action("UpdateUser", "System")")
        }
    }

    const Create = () => {
        const x = document.getElementById("btn-create");
        if (isNull("txtUsername") || isNull("txtPassword") || isNull("txtCreateBy") || isNull("txtModifiedBy") || isNull("txtFullname") || isNull("txtUserStatus") || isNull("txtModifiedOn")) {
            x.setAttribute("type", "button")
            alert("Cần điền đầy đủ các trường")
        } else {
            x.setAttribute("type", "submit")
            document.getElementById("form_info").setAttribute("action", "@Url.Action("CreateUser", "System")")
        }
    }

    const Search = () => {
        const x = document.getElementById("btn-search");
        const y = document.getElementById("txtUsername");
        if (isNull("txtUsername")) {
            x.setAttribute("type", "button")
            y.focus()
            y.parentElement.querySelector("span").innerText = "Cần điền trường này !"
        } else {
            y.parentElement.querySelector("span").innerText = ""
            x.setAttribute("type", "submit")
            document.getElementById("form_info").setAttribute("action", "@Url.Action("Index", "System")")
        }
    }

    const Refresh = () => {
        document.getElementById("form_info").setAttribute("method", "GET")
        document.getElementById("form_info").setAttribute("action", "@Url.Action("Index", "System")")
    }

</script>


